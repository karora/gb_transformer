package main

import (
	"fmt"
	"io"
	"log"
	"regexp"
	"sort"
	"strings"
	"time"
)

type WatsonSession struct {
	ID              int      `json:"id"`
	Locations       []string `json:"loc"`
	Name            string   `json:"title"`
	Description     string   `json:"desc"`
	StartTime       string   `json:"dateTime"`
	DurationMinutes int      `json:"mins"`
	Format          string   `json:"format"`
	Tags            []Tag    `json:"tags"`
	Links           Links    `json:"links"`
	People          []Person `json:"people,omitempty"`
	in_person       bool     `json:"-"`
	virtual         bool     `json:"-"`
}

type Tag struct {
	Label    string `json:"label"`
	Value    string `json:"value"`
	Category string `json:"category"`
}

// Links related to the session
type Links struct {
	Session string `json:"session,omitempty"`
	Stage   string `json:"stage,omitempty"`
	Replay  string `json:"replay,omitempty"`
	Chat    string `json:"chat,omitempty"`
}

type Link struct {
	Label    string `json:"label"`
	URL      string `json:"URL"`
	Category string `json:"category"`
}

type Person struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
	Role string `json:"role,omitempty"`
}

const WATSON_TIME_FORMAT string = "2006-01-02T15:04:05.999Z07:00"
const VIRTUAL_ROOM_1 = 5074259
const VIRTUAL_ROOM_2 = 5074260

var notAlphaNumeric = regexp.MustCompile("[^a-zA-Z0-9_]")

func makeTag(label, value, category string) Tag {
	return Tag{
		Label:    label,
		Value:    strings.ToLower(notAlphaNumeric.ReplaceAllLiteralString(strings.ReplaceAll(value, " ", "_"), "")),
		Category: category,
	}
}

// BuildSessionTags builds tags for this session
func (ws *WatsonSession) BuildSessionTags(gs GuidebookSession, gb GuideBook) {
	// This will at worst return an empty set - it will not return an error
	ws.Tags = make([]Tag, 0)

	for _, st := range gs.ScheduleTracks {
		ws.Tags = append(ws.Tags, makeTag(gb.Tracks[st], "track_"+gb.Tracks[st], "Track"))
		if strings.ToLower(gb.Tracks[st]) == "virtual" {
			ws.virtual = true
		}
	}

	for _, loc := range gs.Locations {
		if loc == VIRTUAL_ROOM_1 || loc == VIRTUAL_ROOM_2 {
			ws.virtual = true
		} else {
			ws.in_person = true
		}
	}
	if ws.in_person {
		ws.Tags = append(ws.Tags, makeTag("In Person Session", "session_in_person", "Environment"))
	}
	if ws.virtual {
		ws.Tags = append(ws.Tags, makeTag("Virtual Session", "session_virtual", "Environment"))
	}
}

// BuildSessionLinks builds the "Links" structure for this session
func (ws *WatsonSession) BuildSessionLinks(gs GuidebookSession, gb GuideBook) {
	if ws.virtual {
		ws.Links.Session = fmt.Sprintf("https://virtual.seattlein2025.org/deep-link/session?item_id=%d", ws.ID)
	}
	ws.Links.Chat = fmt.Sprintf("https://virtual.seattlein2025.org/deep-link/chat?item_id=%d", ws.ID)
}

// WatsonFromGuidebook converts everything from the Guidebook structure into an array of WatsonSession.
func WatsonFromGuidebook(gb GuideBook) ([]WatsonSession, error) {

	watson := make([]WatsonSession, 0, len(gb.Sessions))

	for _, gs := range gb.Sessions {
		session := WatsonSession{
			ID:          gs.ID,
			Name:        gs.Name,
			Description: gs.Description,
			StartTime:   gs.StartTime,
			Tags:        make([]Tag, 0),
			Links:       Links{},
		}
		for _, loc := range gs.Locations {
			session.Locations = append(session.Locations, gb.Locations[loc])
		}
		if len(session.Locations) == 0 {
			session.Locations = append(session.Locations, "Discord") // All Hail Eris!
		}
		start, err := time.Parse(GUIDEBOOK_TIME_FORMAT, gs.StartTime)
		if err != nil {
			return watson, err
		}
		finish, err := time.Parse(GUIDEBOOK_TIME_FORMAT, gs.EndTime)
		if err != nil {
			return watson, err
		}
		session.StartTime = start.Format(WATSON_TIME_FORMAT)
		session.DurationMinutes = int(finish.Sub(start) / time.Minute)

		// People in the session are in CustomLinks :-/
		personLinks, exists := gb.SessionLinks[session.ID]
		if exists {
			people := make([]Person, 0, len(personLinks.TargetIDs))
			for _, pl := range personLinks.TargetIDs {
				if pl.TargetType != GB_TARGET_TYPE_PERSON {
					continue
				}
				person := Person{
					ID:   pl.TargetID,
					Name: gb.ListItems[pl.TargetID].Name,
				}
				_, exists := gb.GuestsOfHonor[pl.TargetID]
				if exists {
					person.Role = "Guest of Honor"
				}
				people = append(people, person)
			}
			session.People = people
		}

		session.BuildSessionTags(gs, gb)
		if !(session.in_person || session.virtual) {
			log.Printf("Somehow we have a session (%d, %s) which is neither virtual nor in person: assuming in person", session.ID, session.Name)
			session.in_person = true
		}
		session.BuildSessionLinks(gs, gb)

		sort.Slice(session.People, func(i, j int) bool {
			return session.People[i].ID < session.People[j].ID
		})

		watson = append(watson, session)
	}

	sort.Slice(watson, func(i, j int) bool {
		return watson[i].StartTime < watson[j].StartTime
	})

	return watson, nil
}

func StreamingCSV(w io.Writer, sessions []WatsonSession) {
	fmt.Fprintf(w, "%q,%q,%q\n", "Title", "StartTime", "StreamingURL")
	for _, ws := range sessions {
		if ws.virtual {
			fmt.Fprintf(w, "%q,%q,%q\n", ws.Name, ws.StartTime, ws.Links.Session)
		}
	}
}

func StreamLinksCSV(w io.Writer, sessions []WatsonSession) {

	fmt.Fprintf(w, "%q,%q,%q,%q,%q,%q,%q,%q\n", "Session ID (Optional)", "Session Name (Optional)", "Link To Session ID (Optional)",
		"Link To Session Name (Optional)", "Link To Custom List Item ID (Optional)", "Link To Custom List Item Name (Optional)",
		"Link To URLs (Optional)", "URL Names (Optional)")
	for _, ws := range sessions {
		if stream_session_ids[ws.ID] {
			fmt.Fprintf(w, "%d,%q,%q,%q,%q,%q,%q,%q\n", ws.ID, ws.Name, "", "", "", "", ws.Links.Session, "Join the Stream")
		}
	}
}

func ChatLinksCSV(w io.Writer, sessions []WatsonSession) {

	fmt.Fprintf(w, "%q,%q,%q,%q,%q,%q,%q,%q\n", "Session ID (Optional)", "Session Name (Optional)", "Link To Session ID (Optional)",
		"Link To Session Name (Optional)", "Link To Custom List Item ID (Optional)", "Link To Custom List Item Name (Optional)",
		"Link To URLs (Optional)", "URL Names (Optional)")
	for _, ws := range sessions {
		if chat_session_ids[ws.ID] {
			fmt.Fprintf(w, "%d,%q,%q,%q,%q,%q,%q,%q\n", ws.ID, ws.Name, "", "", "", "", ws.Links.Chat, "Join the Discussion")
		}
	}
}

// Ugly, but hey...
var stream_session_ids map[int]bool
var chat_session_ids map[int]bool

func init() {
	stream_sessions := []int{
		31607049,
		31506731,
		31581940,
		31506730,
		31581941,
		31591365,
		31506750,
		31506749,
		31506751,
		31581942,
		31506756,
		31506774,
		31506775,
		31506773,
		31506778,
		31581987,
		31506797,
		31506800,
		31506798,
		31506796,
		31506795,
		31506824,
		31506829,
		31506825,
		31506823,
		31506822,
		31581989,
		31506848,
		31506849,
		31506851,
		31506854,
		31506850,
		31506883,
		31506877,
		31506876,
		31506859,
		31506878,
		31581991,
		31506901,
		31506902,
		31506903,
		31506900,
		31581944,
		31581943,
		31581946,
		31581945,
		31581959,
		31581960,
		31581949,
		31581948,
		31581983,
		31506917,
		31506928,
		31506929,
		31581950,
		31506931,
		31506930,
		31591366,
		31581951,
		31506955,
		31506954,
		31581984,
		31506961,
		31506956,
		31506957,
		31581952,
		31581990,
		31506986,
		31506987,
		31506989,
		31506993,
		31506988,
		31581981,
		31507014,
		31507016,
		31507013,
		31507020,
		31507015,
		31507747,
		31581988,
		31507044,
		31507043,
		31507045,
		31507046,
		31507075,
		31507072,
		31507073,
		31507079,
		31507074,
		31507062,
		31507101,
		31507103,
		31507109,
		31507102,
		31507104,
		31507108,
		31507130,
		31507128,
		31507129,
		31507133,
		31581953,
		31507134,
		31581954,
		31581955,
		31581956,
		31581957,
		31581958,
		31581986,
		31581961,
		31507157,
		31581963,
		31507159,
		31581962,
		31507151,
		31507158,
		31581964,
		31507184,
		31507186,
		31536817,
		31507187,
		31581985,
		31507185,
		31581965,
		31507221,
		31507216,
		31507208,
		31507192,
		31602966,
		31507217,
		31507215,
		31581992,
		31507252,
		31507247,
		31507248,
		31507245,
		31507246,
		31507239,
		31507282,
		31507279,
		31507280,
		31507281,
		31507288,
		31507256,
		31581993,
		31507311,
		31507313,
		31507319,
		31507312,
		31507302,
		31581982,
		31507347,
		31507352,
		31507345,
		31507346,
		31581994,
		31507344,
		31507373,
		31507371,
		31507376,
		31507372,
		31581966,
		31507377,
		31607046,
		31581967,
		31581969,
		31581968,
		31581970,
		31581971,
		31581972,
		31507398,
		31507400,
		31507399,
		31581973,
		31507403,
		31507397,
		31507408,
		31507427,
		31507429,
		31507433,
		31581974,
		31507428,
		31507426,
		31507460,
		31507466,
		31507461,
		31507462,
		31507459,
		31507483,
		31507490,
		31507495,
		31507491,
		31507489,
		31581995,
		31507496,
		31507526,
		31507519,
		31507521,
		31507520,
		31507553,
		31507554,
		31507557,
		31507551,
		31507552,
		31591367,
		31507584,
		31507586,
		31507585,
		31507583,
		31507561,
		31507605,
		31581975,
		31507602,
		31581976,
		31581977,
		31507626,
		31507624,
		31581979,
		31507625,
		31507623,
		31581980,
		31507658,
		31507652,
		31507653,
		31507654,
		31581978,
		31507651,
		31507684,
		31507678,
		31507681,
		31507679,
		31507680,
		31583846,
		31507707,
		31507706,
		31507704,
		31507705,
		31507711,
		31507731,
		31507730,
		31507729,
		31507728,
		31507744,
		31507748,
		31507746,
	}
	stream_session_ids = make(map[int]bool, len(stream_sessions))
	for _, stream := range stream_sessions {
		stream_session_ids[stream] = true
	}

	chat_sessions := []int{
		31506725,
		31506728,
		31506729,
		31506735,
		31506738,
		31506739,
		31506740,
		31506741,
		31506742,
		31506743,
		31506744,
		31506745,
		31506746,
		31506747,
		31506748,
		31506752,
		31506753,
		31506755,
		31507621,
		31506757,
		31506762,
		31506763,
		31506764,
		31506765,
		31506766,
		31506767,
		31506768,
		31506769,
		31506770,
		31506771,
		31506772,
		31506776,
		31506777,
		31593756,
		31506779,
		31506780,
		31506781,
		31506784,
		31506785,
		31506786,
		31506787,
		31506788,
		31506789,
		31506790,
		31506791,
		31506792,
		31506793,
		31506794,
		31506799,
		31570002,
		31593758,
		31506732,
		31506801,
		31506804,
		31506805,
		31506810,
		31506811,
		31506812,
		31506813,
		31506814,
		31506815,
		31506816,
		31506817,
		31506818,
		31506819,
		31506820,
		31506821,
		31506826,
		31506827,
		31506830,
		31506831,
		31506832,
		31506835,
		31506836,
		31506837,
		31506838,
		31506839,
		31506840,
		31506841,
		31506842,
		31506843,
		31506844,
		31506845,
		31506846,
		31506847,
		31506852,
		31506853,
		31536807,
		31619064,
		31506856,
		31506857,
		31591364,
		31506860,
		31506863,
		31506864,
		31506865,
		31506866,
		31506867,
		31506868,
		31506869,
		31506870,
		31506871,
		31506873,
		31506874,
		31506875,
		31506879,
		31506880,
		31506882,
		31506803,
		31506884,
		31506885,
		31506886,
		31506890,
		31506891,
		31506892,
		31506894,
		31506895,
		31506896,
		31506897,
		31506899,
		31506904,
		31506905,
		31506906,
		31506908,
		31506911,
		31506916,
		31506918,
		31506919,
		31506920,
		31506921,
		31506923,
		31506924,
		31506925,
		31506926,
		31506927,
		31506932,
		31506933,
		31570040,
		31601356,
		31506934,
		31506935,
		31506936,
		31506937,
		31506893,
		31506940,
		31506941,
		31506943,
		31506944,
		31506945,
		31506946,
		31506947,
		31506948,
		31506949,
		31506950,
		31506951,
		31506952,
		31506953,
		31506958,
		31506959,
		31506962,
		31506963,
		31506967,
		31506968,
		31506969,
		31506974,
		31506975,
		31506976,
		31506977,
		31506978,
		31506979,
		31506980,
		31506981,
		31506982,
		31506983,
		31506984,
		31506985,
		31506990,
		31506991,
		31506994,
		31506995,
		31506996,
		31506999,
		31507000,
		31507001,
		31507003,
		31507004,
		31507005,
		31507006,
		31507007,
		31507008,
		31507009,
		31507010,
		31507012,
		31507017,
		31507018,
		31507022,
		31507747,
		31507011,
		31507021,
		31507026,
		31507027,
		31507028,
		31507031,
		31507032,
		31507033,
		31507034,
		31507035,
		31507036,
		31507037,
		31507038,
		31507039,
		31507040,
		31507041,
		31507042,
		31507047,
		31507048,
		31537081,
		31507050,
		31507051,
		31507056,
		31507057,
		31507058,
		31507061,
		31507063,
		31507064,
		31507065,
		31507066,
		31507067,
		31507068,
		31507069,
		31507070,
		31507071,
		31507075,
		31507076,
		31507077,
		31507080,
		31593757,
		31507082,
		31507083,
		31507084,
		31507089,
		31507090,
		31507091,
		31507092,
		31507093,
		31507094,
		31507095,
		31507096,
		31507097,
		31507098,
		31507099,
		31507100,
		31507105,
		31507106,
		31507110,
		31507111,
		31507112,
		31507113,
		31507115,
		31507116,
		31507117,
		31507118,
		31507119,
		31507120,
		31507121,
		31507122,
		31507123,
		31507124,
		31507126,
		31507127,
		31507131,
		31507132,
		31507134,
		31507135,
		31507140,
		31507141,
		31507142,
		31507145,
		31507146,
		31507147,
		31507148,
		31507149,
		31507150,
		31507152,
		31507153,
		31507154,
		31507155,
		31507156,
		31507160,
		31507161,
		31507162,
		31507163,
		31507164,
		31507165,
		31507169,
		31507170,
		31507171,
		31507173,
		31507174,
		31507175,
		31507176,
		31507177,
		31507178,
		31507179,
		31507180,
		31507181,
		31507182,
		31507183,
		31507188,
		31507189,
		31536817,
		31507190,
		31507191,
		31507192,
		31507195,
		31507196,
		31507197,
		31507202,
		31507203,
		31507204,
		31507205,
		31507206,
		31507207,
		31507209,
		31507210,
		31507211,
		31507212,
		31507213,
		31507214,
		31507218,
		31507219,
		31507222,
		31507223,
		31507224,
		31507231,
		31507232,
		31507234,
		31507235,
		31507236,
		31507237,
		31507238,
		31507239,
		31507240,
		31507241,
		31507242,
		31507243,
		31507244,
		31507249,
		31507250,
		31507251,
		31507253,
		31507254,
		31507255,
		31602366,
		31507256,
		31507260,
		31507262,
		31507263,
		31507267,
		31507268,
		31507269,
		31507270,
		31507271,
		31507272,
		31507273,
		31507274,
		31507275,
		31507276,
		31507277,
		31507278,
		31507283,
		31507284,
		31570041,
		31507290,
		31507291,
		31507295,
		31507296,
		31507297,
		31507300,
		31507301,
		31507303,
		31507304,
		31507305,
		31507306,
		31507307,
		31507308,
		31507309,
		31507310,
		31507314,
		31507315,
		31507316,
		31507317,
		31507320,
		31507321,
		31507322,
		31507323,
		31507326,
		31507327,
		31507328,
		31507333,
		31507334,
		31507335,
		31507336,
		31507337,
		31507338,
		31507339,
		31507340,
		31507341,
		31507342,
		31507343,
		31507348,
		31507349,
		31507353,
		31507354,
		31507355,
		31507357,
		31507360,
		31507361,
		31507362,
		31507363,
		31507364,
		31507365,
		31507366,
		31507367,
		31507368,
		31507369,
		31507370,
		31507375,
		31593755,
		31607026,
		31507377,
		31507378,
		31507379,
		31507374,
		31507383,
		31507385,
		31507390,
		31507391,
		31507392,
		31507393,
		31507394,
		31507395,
		31507396,
		31507401,
		31507402,
		31507404,
		31507405,
		31507406,
		31593835,
		31507407,
		31507412,
		31507413,
		31507414,
		31507415,
		31507416,
		31507417,
		31507418,
		31507419,
		31507420,
		31507421,
		31507422,
		31507423,
		31507424,
		31507425,
		31507430,
		31507431,
		31507434,
		31507435,
		31507436,
		31507440,
		31507441,
		31507442,
		31507447,
		31507448,
		31507449,
		31507450,
		31507451,
		31507452,
		31507453,
		31507454,
		31507455,
		31507456,
		31507457,
		31507458,
		31507463,
		31507464,
		31507467,
		31507468,
		31507474,
		31507475,
		31507476,
		31507478,
		31507479,
		31507480,
		31507481,
		31507482,
		31507484,
		31507485,
		31507486,
		31507487,
		31507488,
		31507492,
		31507493,
		31537762,
		31507496,
		31507497,
		31507498,
		31507499,
		31507502,
		31507503,
		31507504,
		31507507,
		31507508,
		31507509,
		31507510,
		31507511,
		31507512,
		31507513,
		31507514,
		31507515,
		31507516,
		31507517,
		31507518,
		31507522,
		31507523,
		31507528,
		31507529,
		31507534,
		31507535,
		31507536,
		31507540,
		31507541,
		31507542,
		31507543,
		31507544,
		31507545,
		31507546,
		31507547,
		31507548,
		31507549,
		31507550,
		31507555,
		31507556,
		31507558,
		31507559,
		31507560,
		31507561,
		31507565,
		31507566,
		31507567,
		31507571,
		31507572,
		31507573,
		31507574,
		31507575,
		31507576,
		31507577,
		31507578,
		31507579,
		31507580,
		31507581,
		31507582,
		31507587,
		31507588,
		31507590,
		31507591,
		31507594,
		31507595,
		31507596,
		31507597,
		31507598,
		31507599,
		31507600,
		31507603,
		31507604,
		31507606,
		31507608,
		31507609,
		31507610,
		31507613,
		31507614,
		31507615,
		31507616,
		31507617,
		31507618,
		31507619,
		31507620,
		31507622,
		31507627,
		31507628,
		31507629,
		31507630,
		31507631,
		31507634,
		31507635,
		31507636,
		31507640,
		31507641,
		31507642,
		31507643,
		31507644,
		31507645,
		31507646,
		31507647,
		31507648,
		31507649,
		31507650,
		31507655,
		31507656,
		31507601,
		31507659,
		31507660,
		31507661,
		31507662,
		31507666,
		31507667,
		31507668,
		31507669,
		31507670,
		31507671,
		31507672,
		31507673,
		31507674,
		31507675,
		31507676,
		31507677,
		31507682,
		31507683,
		31507685,
		31507686,
		31507687,
		31507690,
		31507691,
		31507693,
		31507694,
		31507695,
		31507696,
		31507697,
		31507698,
		31507700,
		31507701,
		31507702,
		31507703,
		31507708,
		31507709,
		31507710,
		31570101,
		31507712,
		31507713,
		31570003,
		31507714,
		31507715,
		31507717,
		31507718,
		31507719,
		31507720,
		31507721,
		31507722,
		31507723,
		31507724,
		31507725,
		31507726,
		31507727,
		31507732,
		31507733,
		31507734,
		31507735,
		31507736,
		31570001,
		31507737,
		31507739,
		31507740,
		31507742,
		31507743,
		31507745,
		31507749,
		31537751,
		31506726,
		31506727,
		31506730,
		31506731,
		31581940,
		31607049,
		31506736,
		31506737,
		31506749,
		31506750,
		31506751,
		31581941,
		31591365,
		31581942,
		31506756,
		31506758,
		31506759,
		31506760,
		31506761,
		31506773,
		31506774,
		31506775,
		31506778,
		31506795,
		31506796,
		31506797,
		31506798,
		31506800,
		31506807,
		31506808,
		31506809,
		31506822,
		31506823,
		31506824,
		31506825,
		31506829,
		31569999,
		31506848,
		31506849,
		31506850,
		31506851,
		31506854,
		31506859,
		31506861,
		31506862,
		31506876,
		31506877,
		31506878,
		31506883,
		31506888,
		31506889,
		31506900,
		31506901,
		31506902,
		31506903,
		31602568,
		31581943,
		31581944,
		31581945,
		31581946,
		31581959,
		31581960,
		31581948,
		31581949,
		31506912,
		31506913,
		31506914,
		31506917,
		31506928,
		31506929,
		31506930,
		31506931,
		31581950,
		31581983,
		31591366,
		31506942,
		31506954,
		31506955,
		31506956,
		31506957,
		31506961,
		31581951,
		31581984,
		31581952,
		31506970,
		31506971,
		31506972,
		31506973,
		31506986,
		31506987,
		31506988,
		31506989,
		31506993,
		31581981,
		31507002,
		31507013,
		31507014,
		31507015,
		31507016,
		31507020,
		31507593,
		31507029,
		31507030,
		31507043,
		31507044,
		31507045,
		31507046,
		31569998,
		31507059,
		31507060,
		31507062,
		31507072,
		31507073,
		31507074,
		31507079,
		31602883,
		31507085,
		31507086,
		31507087,
		31507088,
		31507101,
		31507102,
		31507103,
		31507104,
		31507109,
		31507128,
		31507129,
		31507130,
		31507133,
		31581953,
		31581954,
		31581956,
		31581957,
		31581958,
		31581986,
		31581961,
		31506806,
		31507143,
		31507144,
		31507151,
		31507157,
		31507158,
		31507159,
		31569995,
		31581962,
		31581963,
		31602128,
		31507184,
		31507185,
		31507186,
		31507187,
		31581964,
		31581985,
		31581965,
		31507198,
		31507199,
		31507201,
		31507208,
		31507215,
		31507216,
		31507217,
		31507221,
		31507469,
		31602966,
		31507233,
		31507245,
		31507246,
		31507247,
		31507248,
		31507252,
		31507264,
		31507265,
		31507266,
		31507279,
		31507280,
		31507281,
		31507282,
		31507288,
		31507298,
		31507299,
		31507302,
		31507311,
		31507312,
		31507313,
		31507319,
		31581982,
		31507329,
		31507330,
		31507331,
		31507332,
		31507344,
		31507345,
		31507346,
		31507347,
		31507352,
		31507358,
		31507359,
		31507371,
		31507372,
		31507373,
		31507376,
		31581966,
		31581967,
		31607046,
		31581968,
		31581969,
		31581970,
		31581971,
		31581972,
		31507386,
		31507387,
		31507388,
		31507389,
		31507397,
		31507398,
		31507399,
		31507400,
		31507403,
		31581973,
		31507426,
		31507427,
		31507428,
		31507429,
		31507433,
		31581974,
		31628882,
		31507443,
		31507444,
		31507445,
		31507446,
		31507459,
		31507460,
		31507461,
		31507462,
		31507466,
		31507200,
		31507477,
		31507483,
		31507489,
		31507490,
		31507491,
		31507495,
		31507505,
		31507506,
		31507519,
		31507520,
		31507521,
		31507526,
		31507537,
		31507538,
		31507539,
		31507551,
		31507552,
		31507553,
		31507554,
		31507557,
		31591367,
		31507568,
		31507569,
		31507570,
		31507583,
		31507584,
		31507585,
		31507586,
		31507602,
		31507605,
		31532665,
		31581975,
		31581976,
		31581977,
		31507611,
		31507612,
		31507623,
		31507624,
		31507625,
		31507626,
		31581978,
		31581979,
		31507637,
		31507638,
		31507639,
		31507651,
		31507652,
		31507653,
		31507654,
		31507658,
		31581980,
		31630064,
		31507663,
		31507664,
		31507665,
		31507678,
		31507679,
		31507680,
		31507681,
		31507684,
		31507692,
		31507704,
		31507705,
		31507706,
		31507707,
		31507711,
		31593759,
		31507172,
		31507716,
		31507728,
		31507729,
		31507730,
		31507731,
		31536638,
		31570000,
		31507741,
		31507744,
		31507746,
		31507748,
	}
	chat_session_ids = make(map[int]bool, len(chat_sessions))
	for _, stream := range chat_sessions {
		chat_session_ids[stream] = true
	}
}
